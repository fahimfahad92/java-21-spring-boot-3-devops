# syntax=docker/dockerfile:1.4

# ---- Base build image with JDK ----
FROM bellsoft/liberica-runtime-container:jdk-21-cds-musl AS base-build
WORKDIR /app

# Copy Maven wrapper and pom first (for better caching)
COPY .mvn/ .mvn
COPY mvnw pom.xml ./
RUN chmod +x mvnw

# ---- Dependency resolution ----
FROM base-build AS dependency
RUN --mount=type=cache,target=/root/.m2 \
    ./mvnw dependency:go-offline -DskipTests

# ---- Build the application ----
FROM base-build AS builder
COPY src src
RUN --mount=type=cache,target=/root/.m2 \
    ./mvnw clean package -DskipTests

# ---- Optimize layered jar ----
FROM bellsoft/liberica-runtime-container:jre-21-cds-slim-musl AS optimizer
WORKDIR /app
COPY --from=builder /app/target/*.jar app.jar
RUN java -Djarmode=tools -jar app.jar extract --layers --destination extracted

# ---- Final runtime image ----
FROM bellsoft/liberica-runtime-container:jre-21-cds-slim-musl
WORKDIR /app

# Copy layered JAR content
COPY --from=optimizer /app/extracted/dependencies/ ./
COPY --from=optimizer /app/extracted/spring-boot-loader/ ./
COPY --from=optimizer /app/extracted/snapshot-dependencies/ ./
COPY --from=optimizer /app/extracted/application/ ./

# Build CDS archive at image build time
RUN java \
    -Dspring.aot.enabled=true \
    -XX:ArchiveClassesAtExit=./application.jsa \
    -Dspring.context.exit=onRefresh \
    -jar /app/app.jar || true

# Use the CDS archive at runtime
ENTRYPOINT ["java", "-Dspring.aot.enabled=true", "-XX:SharedArchiveFile=application.jsa", "-jar", "/app/app.jar"]